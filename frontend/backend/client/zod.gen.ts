// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

/**
 * AuthLoginRequest
 */
export const zAuthLoginRequest = z.object({
  nickname: z.string(),
  password: z.string(),
});

/**
 * AuthPasswordResetRequest
 */
export const zAuthPasswordResetRequest = z.object({
  id: z.string().uuid(),
  initial_password: z.string(),
  new_password: z.string(),
});

/**
 * AuthRegisterRequest
 */
export const zAuthRegisterRequest = z.object({
  email: z.string(),
  nickname: z.union([z.string(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  lastname: z.union([z.string(), z.null()]).optional(),
  job_position: z.union([z.string(), z.null()]).optional(),
  phone_number: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreateGroupRequest
 */
export const zCreateGroupRequest = z.object({
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreatePermissionRequest
 */
export const zCreatePermissionRequest = z.object({
  name: z.string(),
  token: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreateRoleRequest
 */
export const zCreateRoleRequest = z.object({
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreateUserRequest
 */
export const zCreateUserRequest = z.object({
  name: z.string().optional().default("Denise Grimes"),
  lastname: z.string().optional().default("Cooke"),
  email: z.string().optional().default("prose@example.net"),
});

/**
 * Permission
 */
export const zPermission = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  group_name: z.union([z.string(), z.null()]).optional(),
  name: z.string(),
  token: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * GroupAddPermissionResponse
 */
export const zGroupAddPermissionResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
});

/**
 * GroupPermission
 */
export const zGroupPermission = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * GroupResponse
 */
export const zGroupResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
});

/**
 * ValidationError
 */
export const zValidationError = z.object({
  loc: z.array(z.union([z.string(), z.number().int()])),
  msg: z.string(),
  type: z.string(),
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
  detail: z.array(zValidationError).optional(),
});

/**
 * Module
 */
export const zModule = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  token: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * RefreshTokenRequest
 */
export const zRefreshTokenRequest = z.object({
  refresh_token: z.string(),
});

/**
 * UserLoginResponseDTO
 */
export const zUserLoginResponseDto = z.object({
  id: z.string().uuid(),
  nickname: z.union([z.string(), z.null()]).optional(),
  email: z.union([z.string(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  lastname: z.union([z.string(), z.null()]).optional(),
  job_position: z.union([z.string(), z.null()]).optional(),
  fk_role: z.union([z.number().int(), z.null()]).optional(),
});

/**
 * RefreshTokenResponse
 */
export const zRefreshTokenResponse = z.object({
  user: zUserLoginResponseDto,
  permissions: z.array(z.string()),
  token: z.string(),
  refresh_token: z.string(),
});

/**
 * RoleAddGroupsResponse
 */
export const zRoleAddGroupsResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  groups: z.union([z.array(zGroupPermission), z.null()]).optional(),
});

/**
 * RoleAddModulesResponse
 */
export const zRoleAddModulesResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  modules: z.union([z.array(zModule), z.null()]).optional(),
});

/**
 * RoleAddPermissionResponse
 */
export const zRoleAddPermissionResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
});

/**
 * RoleRequest
 */
export const zRoleRequest = z.object({
  id: z.number().int(),
  name: z.string(),
});

/**
 * RoleResponse
 */
export const zRoleResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  groups: z.union([z.array(zGroupPermission), z.null()]).optional(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
  modules: z.union([z.array(zModule), z.null()]).optional(),
});

/**
 * VerifyTokenRequest
 */
export const zVerifyTokenRequest = z.object({
  token: z.string(),
});

export const zRefreshTokenAuthV1AuthRefreshPostData = z.object({
  body: zRefreshTokenRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zRefreshTokenAuthV1AuthRefreshPostResponse = zRefreshTokenResponse;

export const zVerifyTokenAuthV1AuthVerifyPostData = z.object({
  body: zVerifyTokenRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zLoginAuthV1AuthLoginPostData = z.object({
  body: zAuthLoginRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zRegisterAuthV1AuthRegisterPostData = z.object({
  body: zAuthRegisterRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zPasswordResetAuthV1AuthPasswordResetPostData = z.object({
  body: zAuthPasswordResetRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetAllRolesRbacV1RbacRoleGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zCreateRoleRbacV1RbacRolePostData = z.object({
  body: zCreateRoleRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zEditRoleRbacV1RbacRolePutData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zDeleteRoleRbacV1RbacRoleIdRoleDeleteData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zGetRoleRbacV1RbacRoleIdRoleGetData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zGetRoleRbacV1RbacRoleIdRoleGetResponse = zRoleResponse;

export const zGetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetData =
  z.object({
    body: z.never().optional(),
    path: z.object({
      id_role: z.number().int(),
    }),
    query: z.never().optional(),
  });

/**
 * Response Get All Role Permissions Rbac V1 Rbac Role  Id Role  Permission Get
 * Successful Response
 */
export const zGetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetResponse =
  z.array(zPermission);

export const zAddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutData =
  z.object({
    body: z.array(zPermission),
    path: z.object({
      id_role: z.number().int(),
    }),
    query: z.never().optional(),
  });

/**
 * Successful Response
 */
export const zAddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutResponse =
  zRoleAddPermissionResponse;

export const zAddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutData = z.object({
  body: z.array(zGroupPermission),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zAddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutResponse =
  zRoleAddGroupsResponse;

export const zAddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutData = z.object({
  body: z.array(zModule),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zAddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutResponse =
  zRoleAddModulesResponse;

export const zGetAllPermissionsRbacV1RbacPermissionGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zCreatePermissionRbacV1RbacPermissionPostData = z.object({
  body: zCreatePermissionRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zEditPermissionRbacV1RbacPermissionPutData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    permission: z.unknown(),
  }),
});

export const zDeletePermissionRbacV1RbacPermissionIdPermissionDeleteData =
  z.object({
    body: z.never().optional(),
    path: z.object({
      id_permission: z.number().int(),
    }),
    query: z.never().optional(),
  });

export const zGetPermissionRbacV1RbacPermissionIdPermissionGetData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_permission: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zGetAllGroupsRbacV1RbacGroupGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zCreateGroupRbacV1RbacGroupPostData = z.object({
  body: zCreateGroupRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetGroupRbacV1RbacGroupIdGroupGetData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_group: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zGetGroupRbacV1RbacGroupIdGroupGetResponse = zGroupResponse;

export const zAddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutData =
  z.object({
    body: z.array(zPermission),
    path: z.object({
      id_group: z.number().int(),
    }),
    query: z.never().optional(),
  });

/**
 * Successful Response
 */
export const zAddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutResponse =
  zGroupAddPermissionResponse;

export const zGetUserListUsersV1UsersGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      limit: z.number().int().gte(1).lte(50).optional().default(10),
      page: z.number().int().optional().default(0),
    })
    .optional(),
});

export const zCreateUserUsersV1UsersPostData = z.object({
  body: zCreateUserRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetUserUsersV1UsersUserIdGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    user_uuid: z.string().uuid(),
  }),
});

export const zAsignRoleUsersV1UsersUserUuidRolePutData = z.object({
  body: zRoleRequest,
  path: z.object({
    user_uuid: z.string().uuid(),
  }),
  query: z.never().optional(),
});

export const zGetAllProvidersProvidersV1ProvidersGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      limit: z.number().int().gte(1).lte(50).optional().default(10),
      page: z.number().int().optional().default(0),
    })
    .optional(),
});

export const zGetSystemPermissionsPermissionsGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetSystemModulesModulesGetData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});
