// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

/**
 * AuthLoginRequest
 */
export const zAuthLoginRequest = z.object({
  nickname: z.string(),
  password: z.string(),
});

/**
 * AuthPasswordResetRequest
 */
export const zAuthPasswordResetRequest = z.object({
  id: z.string().uuid(),
  initial_password: z.string(),
  new_password: z.string(),
});

/**
 * AuthRegisterRequest
 */
export const zAuthRegisterRequest = z.object({
  email: z.string(),
  nickname: z.union([z.string(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  lastname: z.union([z.string(), z.null()]).optional(),
  job_position: z.union([z.string(), z.null()]).optional(),
  phone_number: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreateGroupRequest
 */
export const zCreateGroupRequest = z.object({
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreatePermissionRequest
 */
export const zCreatePermissionRequest = z.object({
  name: z.string(),
  token: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreateRoleRequest
 */
export const zCreateRoleRequest = z.object({
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * CreateUserRequest
 */
export const zCreateUserRequest = z.object({
  name: z.string().optional().default("Melissa Griffin"),
  lastname: z.string().optional().default("Johnson"),
  email: z.string().optional().default("geoffrey82@example.net"),
});

/**
 * Permission
 */
export const zPermission = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  group_name: z.union([z.string(), z.null()]).optional(),
  name: z.string(),
  token: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * GroupAddPermissionResponse
 */
export const zGroupAddPermissionResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
});

/**
 * GroupPermission
 */
export const zGroupPermission = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * GroupResponse
 */
export const zGroupResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
});

/**
 * ValidationError
 */
export const zValidationError = z.object({
  loc: z.array(z.union([z.string(), z.number().int()])),
  msg: z.string(),
  type: z.string(),
});

/**
 * HTTPValidationError
 */
export const zHttpValidationError = z.object({
  detail: z.array(zValidationError).optional(),
});

/**
 * Module
 */
export const zModule = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  token: z.string(),
  description: z.union([z.string(), z.null()]).optional(),
});

/**
 * RefreshTokenRequest
 */
export const zRefreshTokenRequest = z.object({
  refresh_token: z.string(),
});

/**
 * UserLoginResponseDTO
 */
export const zUserLoginResponseDto = z.object({
  id: z.string().uuid(),
  nickname: z.union([z.string(), z.null()]).optional(),
  email: z.union([z.string(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  lastname: z.union([z.string(), z.null()]).optional(),
  job_position: z.union([z.string(), z.null()]).optional(),
  fk_role: z.union([z.number().int(), z.null()]).optional(),
});

/**
 * RefreshTokenResponse
 */
export const zRefreshTokenResponse = z.object({
  user: zUserLoginResponseDto,
  permissions: z.array(z.string()),
  token: z.string(),
  refresh_token: z.string(),
});

/**
 * RoleAddGroupsResponse
 */
export const zRoleAddGroupsResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  groups: z.union([z.array(zGroupPermission), z.null()]).optional(),
});

/**
 * RoleAddModulesResponse
 */
export const zRoleAddModulesResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  modules: z.union([z.array(zModule), z.null()]).optional(),
});

/**
 * RoleAddPermissionResponse
 */
export const zRoleAddPermissionResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.string(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
});

/**
 * RoleRequest
 */
export const zRoleRequest = z.object({
  id: z.number().int(),
  name: z.string(),
});

/**
 * RoleResponse
 */
export const zRoleResponse = z.object({
  id: z.union([z.number().int(), z.null()]).optional(),
  name: z.union([z.string(), z.null()]).optional(),
  description: z.union([z.string(), z.null()]).optional(),
  groups: z.union([z.array(zGroupPermission), z.null()]).optional(),
  permissions: z.union([z.array(zPermission), z.null()]).optional(),
  modules: z.union([z.array(zModule), z.null()]).optional(),
});

/**
 * VerifyTokenRequest
 */
export const zVerifyTokenRequest = z.object({
  token: z.string(),
});

export const zRefreshTokenData = z.object({
  body: zRefreshTokenRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zRefreshTokenResponse2 = zRefreshTokenResponse;

export const zVerifyTokenData = z.object({
  body: zVerifyTokenRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zLoginData = z.object({
  body: zAuthLoginRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zRegisterData = z.object({
  body: zAuthRegisterRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zPasswordResetData = z.object({
  body: zAuthPasswordResetRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetAllRolesData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zCreateRoleData = z.object({
  body: zCreateRoleRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zEditRoleData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zDeleteRoleData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zGetRoleData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zGetRoleResponse = zRoleResponse;

export const zGetAllRolePermissionsData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Response Rbac-Get All Role Permissions
 * Successful Response
 */
export const zGetAllRolePermissionsResponse = z.array(zPermission);

export const zAddPermissionsToRoleData = z.object({
  body: z.array(zPermission),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zAddPermissionsToRoleResponse = zRoleAddPermissionResponse;

export const zAddGroupsToRoleData = z.object({
  body: z.array(zGroupPermission),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zAddGroupsToRoleResponse = zRoleAddGroupsResponse;

export const zAddModulesToRoleData = z.object({
  body: z.array(zModule),
  path: z.object({
    id_role: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zAddModulesToRoleResponse = zRoleAddModulesResponse;

export const zGetAllPermissionsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zCreatePermissionData = z.object({
  body: zCreatePermissionRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zEditPermissionData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    permission: z.unknown(),
  }),
});

export const zDeletePermissionData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_permission: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zGetPermissionData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_permission: z.number().int(),
  }),
  query: z.never().optional(),
});

export const zGetAllGroupsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zCreateGroupData = z.object({
  body: zCreateGroupRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetGroupData = z.object({
  body: z.never().optional(),
  path: z.object({
    id_group: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zGetGroupResponse = zGroupResponse;

export const zAddPermissionsToGroupData = z.object({
  body: z.array(zPermission),
  path: z.object({
    id_group: z.number().int(),
  }),
  query: z.never().optional(),
});

/**
 * Successful Response
 */
export const zAddPermissionsToGroupResponse = zGroupAddPermissionResponse;

export const zGetUserListData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      limit: z.number().int().gte(1).lte(50).optional().default(10),
      page: z.number().int().optional().default(0),
    })
    .optional(),
});

export const zCreateUserData = z.object({
  body: zCreateUserRequest,
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetUserData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.object({
    user_uuid: z.string().uuid(),
  }),
});

export const zAsignRoleData = z.object({
  body: zRoleRequest,
  path: z.object({
    user_uuid: z.string().uuid(),
  }),
  query: z.never().optional(),
});

export const zGetAllProvidersData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z
    .object({
      limit: z.number().int().gte(1).lte(50).optional().default(10),
      page: z.number().int().optional().default(0),
    })
    .optional(),
});

export const zGetBackendSchemaData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetSystemPermissionsData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});

export const zGetSystemModulesData = z.object({
  body: z.never().optional(),
  path: z.never().optional(),
  query: z.never().optional(),
});
