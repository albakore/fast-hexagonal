// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "./client";
import type {
  RefreshTokenData,
  RefreshTokenResponses,
  RefreshTokenErrors,
  VerifyTokenData,
  VerifyTokenResponses,
  VerifyTokenErrors,
  LoginData,
  LoginResponses,
  LoginErrors,
  RegisterData,
  RegisterResponses,
  RegisterErrors,
  PasswordResetData,
  PasswordResetResponses,
  PasswordResetErrors,
  GetAllRolesData,
  GetAllRolesResponses,
  CreateRoleData,
  CreateRoleResponses,
  CreateRoleErrors,
  EditRoleData,
  EditRoleResponses,
  DeleteRoleData,
  DeleteRoleResponses,
  DeleteRoleErrors,
  GetRoleData,
  GetRoleResponses,
  GetRoleErrors,
  GetAllRolePermissionsData,
  GetAllRolePermissionsResponses,
  GetAllRolePermissionsErrors,
  AddPermissionsToRoleData,
  AddPermissionsToRoleResponses,
  AddPermissionsToRoleErrors,
  AddGroupsToRoleData,
  AddGroupsToRoleResponses,
  AddGroupsToRoleErrors,
  AddModulesToRoleData,
  AddModulesToRoleResponses,
  AddModulesToRoleErrors,
  GetAllPermissionsData,
  GetAllPermissionsResponses,
  CreatePermissionData,
  CreatePermissionResponses,
  CreatePermissionErrors,
  EditPermissionData,
  EditPermissionResponses,
  EditPermissionErrors,
  DeletePermissionData,
  DeletePermissionResponses,
  DeletePermissionErrors,
  GetPermissionData,
  GetPermissionResponses,
  GetPermissionErrors,
  GetAllGroupsData,
  GetAllGroupsResponses,
  CreateGroupData,
  CreateGroupResponses,
  CreateGroupErrors,
  GetGroupData,
  GetGroupResponses,
  GetGroupErrors,
  AddPermissionsToGroupData,
  AddPermissionsToGroupResponses,
  AddPermissionsToGroupErrors,
  GetUserListData,
  GetUserListResponses,
  GetUserListErrors,
  CreateUserData,
  CreateUserResponses,
  CreateUserErrors,
  GetUserData,
  GetUserResponses,
  GetUserErrors,
  AsignRoleData,
  AsignRoleResponses,
  AsignRoleErrors,
  GetAllProvidersData,
  GetAllProvidersResponses,
  GetAllProvidersErrors,
  GetBackendSchemaData,
  GetBackendSchemaResponses,
  GetSystemPermissionsData,
  GetSystemPermissionsResponses,
  GetSystemModulesData,
  GetSystemModulesResponses,
} from "./types.gen";
import {
  zRefreshTokenData,
  zRefreshTokenResponse2,
  zVerifyTokenData,
  zLoginData,
  zRegisterData,
  zPasswordResetData,
  zGetAllRolesData,
  zCreateRoleData,
  zEditRoleData,
  zDeleteRoleData,
  zGetRoleData,
  zGetRoleResponse,
  zGetAllRolePermissionsData,
  zGetAllRolePermissionsResponse,
  zAddPermissionsToRoleData,
  zAddPermissionsToRoleResponse,
  zAddGroupsToRoleData,
  zAddGroupsToRoleResponse,
  zAddModulesToRoleData,
  zAddModulesToRoleResponse,
  zGetAllPermissionsData,
  zCreatePermissionData,
  zEditPermissionData,
  zDeletePermissionData,
  zGetPermissionData,
  zGetAllGroupsData,
  zCreateGroupData,
  zGetGroupData,
  zGetGroupResponse,
  zAddPermissionsToGroupData,
  zAddPermissionsToGroupResponse,
  zGetUserListData,
  zCreateUserData,
  zGetUserData,
  zAsignRoleData,
  zGetAllProvidersData,
  zGetBackendSchemaData,
  zGetSystemPermissionsData,
  zGetSystemModulesData,
} from "./zod.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class Auth {
  /**
   * Refresh Token
   */
  public static refreshToken<ThrowOnError extends boolean = false>(
    options: Options<RefreshTokenData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      RefreshTokenResponses,
      RefreshTokenErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zRefreshTokenData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zRefreshTokenResponse2.parseAsync(data);
      },
      url: "/auth/v1/auth/refresh",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Verify Token
   */
  public static verifyToken<ThrowOnError extends boolean = false>(
    options: Options<VerifyTokenData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      VerifyTokenResponses,
      VerifyTokenErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zVerifyTokenData.parseAsync(data);
      },
      url: "/auth/v1/auth/verify",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Login
   */
  public static login<ThrowOnError extends boolean = false>(
    options: Options<LoginData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      LoginResponses,
      LoginErrors,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      requestValidator: async (data) => {
        return await zLoginData.parseAsync(data);
      },
      url: "/auth/v1/auth/login",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options.headers,
      },
    });
  }

  /**
   * Register
   */
  public static register<ThrowOnError extends boolean = false>(
    options: Options<RegisterData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      RegisterResponses,
      RegisterErrors,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      requestValidator: async (data) => {
        return await zRegisterData.parseAsync(data);
      },
      url: "/auth/v1/auth/register",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options.headers,
      },
    });
  }

  /**
   * Password Reset
   */
  public static passwordReset<ThrowOnError extends boolean = false>(
    options: Options<PasswordResetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      PasswordResetResponses,
      PasswordResetErrors,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      requestValidator: async (data) => {
        return await zPasswordResetData.parseAsync(data);
      },
      url: "/auth/v1/auth/password_reset",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options.headers,
      },
    });
  }
}

export class Rbac {
  /**
   * Get All Roles
   */
  public static getAllRoles<ThrowOnError extends boolean = false>(
    options?: Options<GetAllRolesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAllRolesResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllRolesData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role",
      ...options,
    });
  }

  /**
   * Create Role
   */
  public static createRole<ThrowOnError extends boolean = false>(
    options: Options<CreateRoleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateRoleResponses,
      CreateRoleErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreateRoleData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Edit Role
   */
  public static editRole<ThrowOnError extends boolean = false>(
    options?: Options<EditRoleData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).put<
      EditRoleResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zEditRoleData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role",
      ...options,
    });
  }

  /**
   * Delete Role
   */
  public static deleteRole<ThrowOnError extends boolean = false>(
    options: Options<DeleteRoleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteRoleResponses,
      DeleteRoleErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zDeleteRoleData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}",
      ...options,
    });
  }

  /**
   * Get Role
   */
  public static getRole<ThrowOnError extends boolean = false>(
    options: Options<GetRoleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetRoleResponses,
      GetRoleErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetRoleData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zGetRoleResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}",
      ...options,
    });
  }

  /**
   * Get All Role Permissions
   */
  public static getAllRolePermissions<ThrowOnError extends boolean = false>(
    options: Options<GetAllRolePermissionsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetAllRolePermissionsResponses,
      GetAllRolePermissionsErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllRolePermissionsData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zGetAllRolePermissionsResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}/permission",
      ...options,
    });
  }

  /**
   * Add Permissions To Role
   */
  public static addPermissionsToRole<ThrowOnError extends boolean = false>(
    options: Options<AddPermissionsToRoleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddPermissionsToRoleResponses,
      AddPermissionsToRoleErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddPermissionsToRoleData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zAddPermissionsToRoleResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}/add/permission",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Add Groups To Role
   */
  public static addGroupsToRole<ThrowOnError extends boolean = false>(
    options: Options<AddGroupsToRoleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddGroupsToRoleResponses,
      AddGroupsToRoleErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddGroupsToRoleData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zAddGroupsToRoleResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}/add/groups",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Add Modules To Role
   */
  public static addModulesToRole<ThrowOnError extends boolean = false>(
    options: Options<AddModulesToRoleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddModulesToRoleResponses,
      AddModulesToRoleErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddModulesToRoleData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zAddModulesToRoleResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}/add/modules",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get All Permissions
   */
  public static getAllPermissions<ThrowOnError extends boolean = false>(
    options?: Options<GetAllPermissionsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAllPermissionsResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllPermissionsData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/permission",
      ...options,
    });
  }

  /**
   * Create Permission
   */
  public static createPermission<ThrowOnError extends boolean = false>(
    options: Options<CreatePermissionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      CreatePermissionResponses,
      CreatePermissionErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreatePermissionData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/permission",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Edit Permission
   */
  public static editPermission<ThrowOnError extends boolean = false>(
    options: Options<EditPermissionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      EditPermissionResponses,
      EditPermissionErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zEditPermissionData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/permission",
      ...options,
    });
  }

  /**
   * Delete Permission
   */
  public static deletePermission<ThrowOnError extends boolean = false>(
    options: Options<DeletePermissionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePermissionResponses,
      DeletePermissionErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zDeletePermissionData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/permission/{id_permission}",
      ...options,
    });
  }

  /**
   * Get Permission
   */
  public static getPermission<ThrowOnError extends boolean = false>(
    options: Options<GetPermissionData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetPermissionResponses,
      GetPermissionErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetPermissionData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/permission/{id_permission}",
      ...options,
    });
  }

  /**
   * Get All Groups
   */
  public static getAllGroups<ThrowOnError extends boolean = false>(
    options?: Options<GetAllGroupsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAllGroupsResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllGroupsData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/group",
      ...options,
    });
  }

  /**
   * Create Group
   */
  public static createGroup<ThrowOnError extends boolean = false>(
    options: Options<CreateGroupData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateGroupResponses,
      CreateGroupErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreateGroupData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/group",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get Group
   */
  public static getGroup<ThrowOnError extends boolean = false>(
    options: Options<GetGroupData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetGroupResponses,
      GetGroupErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetGroupData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zGetGroupResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/group/{id_group}",
      ...options,
    });
  }

  /**
   * Add Permissions To Group
   */
  public static addPermissionsToGroup<ThrowOnError extends boolean = false>(
    options: Options<AddPermissionsToGroupData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddPermissionsToGroupResponses,
      AddPermissionsToGroupErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddPermissionsToGroupData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zAddPermissionsToGroupResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/group/{id_group}/add/permission",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }
}

export class Users {
  /**
   * Get User List
   */
  public static getUserList<ThrowOnError extends boolean = false>(
    options?: Options<GetUserListData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetUserListResponses,
      GetUserListErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetUserListData.parseAsync(data);
      },
      url: "/users/v1/users",
      ...options,
    });
  }

  /**
   * Create User
   */
  public static createUser<ThrowOnError extends boolean = false>(
    options: Options<CreateUserData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      CreateUserResponses,
      CreateUserErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreateUserData.parseAsync(data);
      },
      url: "/users/v1/users",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get User
   */
  public static getUser<ThrowOnError extends boolean = false>(
    options: Options<GetUserData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetUserResponses,
      GetUserErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetUserData.parseAsync(data);
      },
      url: "/users/v1/users/{user_id}",
      ...options,
    });
  }

  /**
   * Asign Role
   */
  public static asignRole<ThrowOnError extends boolean = false>(
    options: Options<AsignRoleData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      AsignRoleResponses,
      AsignRoleErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAsignRoleData.parseAsync(data);
      },
      url: "/users/v1/users/{user_uuid}/role",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }
}

export class Providers {
  /**
   * Get All Providers
   */
  public static getAllProviders<ThrowOnError extends boolean = false>(
    options?: Options<GetAllProvidersData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAllProvidersResponses,
      GetAllProvidersErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllProvidersData.parseAsync(data);
      },
      url: "/providers/v1/providers",
      ...options,
    });
  }
}

export class System {
  /**
   * Get Backend Schema
   */
  public static getBackendSchema<ThrowOnError extends boolean = false>(
    options?: Options<GetBackendSchemaData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetBackendSchemaResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetBackendSchemaData.parseAsync(data);
      },
      url: "/system/openapi_schema",
      ...options,
    });
  }

  /**
   * Get System Permissions
   */
  public static getSystemPermissions<ThrowOnError extends boolean = false>(
    options?: Options<GetSystemPermissionsData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetSystemPermissionsResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetSystemPermissionsData.parseAsync(data);
      },
      url: "/permissions",
      ...options,
    });
  }

  /**
   * Get System Modules
   */
  public static getSystemModules<ThrowOnError extends boolean = false>(
    options?: Options<GetSystemModulesData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetSystemModulesResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetSystemModulesData.parseAsync(data);
      },
      url: "/modules",
      ...options,
    });
  }
}
