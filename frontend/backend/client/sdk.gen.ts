// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "./client";
import type {
  RefreshTokenAuthV1AuthRefreshPostData,
  RefreshTokenAuthV1AuthRefreshPostResponses,
  RefreshTokenAuthV1AuthRefreshPostErrors,
  VerifyTokenAuthV1AuthVerifyPostData,
  VerifyTokenAuthV1AuthVerifyPostResponses,
  VerifyTokenAuthV1AuthVerifyPostErrors,
  LoginAuthV1AuthLoginPostData,
  LoginAuthV1AuthLoginPostResponses,
  LoginAuthV1AuthLoginPostErrors,
  RegisterAuthV1AuthRegisterPostData,
  RegisterAuthV1AuthRegisterPostResponses,
  RegisterAuthV1AuthRegisterPostErrors,
  PasswordResetAuthV1AuthPasswordResetPostData,
  PasswordResetAuthV1AuthPasswordResetPostResponses,
  PasswordResetAuthV1AuthPasswordResetPostErrors,
  GetAllRolesRbacV1RbacRoleGetData,
  GetAllRolesRbacV1RbacRoleGetResponses,
  CreateRoleRbacV1RbacRolePostData,
  CreateRoleRbacV1RbacRolePostResponses,
  CreateRoleRbacV1RbacRolePostErrors,
  EditRoleRbacV1RbacRolePutData,
  EditRoleRbacV1RbacRolePutResponses,
  DeleteRoleRbacV1RbacRoleIdRoleDeleteData,
  DeleteRoleRbacV1RbacRoleIdRoleDeleteResponses,
  DeleteRoleRbacV1RbacRoleIdRoleDeleteErrors,
  GetRoleRbacV1RbacRoleIdRoleGetData,
  GetRoleRbacV1RbacRoleIdRoleGetResponses,
  GetRoleRbacV1RbacRoleIdRoleGetErrors,
  GetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetData,
  GetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetResponses,
  GetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetErrors,
  AddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutData,
  AddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutResponses,
  AddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutErrors,
  AddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutData,
  AddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutResponses,
  AddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutErrors,
  AddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutData,
  AddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutResponses,
  AddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutErrors,
  GetAllPermissionsRbacV1RbacPermissionGetData,
  GetAllPermissionsRbacV1RbacPermissionGetResponses,
  CreatePermissionRbacV1RbacPermissionPostData,
  CreatePermissionRbacV1RbacPermissionPostResponses,
  CreatePermissionRbacV1RbacPermissionPostErrors,
  EditPermissionRbacV1RbacPermissionPutData,
  EditPermissionRbacV1RbacPermissionPutResponses,
  EditPermissionRbacV1RbacPermissionPutErrors,
  DeletePermissionRbacV1RbacPermissionIdPermissionDeleteData,
  DeletePermissionRbacV1RbacPermissionIdPermissionDeleteResponses,
  DeletePermissionRbacV1RbacPermissionIdPermissionDeleteErrors,
  GetPermissionRbacV1RbacPermissionIdPermissionGetData,
  GetPermissionRbacV1RbacPermissionIdPermissionGetResponses,
  GetPermissionRbacV1RbacPermissionIdPermissionGetErrors,
  GetAllGroupsRbacV1RbacGroupGetData,
  GetAllGroupsRbacV1RbacGroupGetResponses,
  CreateGroupRbacV1RbacGroupPostData,
  CreateGroupRbacV1RbacGroupPostResponses,
  CreateGroupRbacV1RbacGroupPostErrors,
  GetGroupRbacV1RbacGroupIdGroupGetData,
  GetGroupRbacV1RbacGroupIdGroupGetResponses,
  GetGroupRbacV1RbacGroupIdGroupGetErrors,
  AddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutData,
  AddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutResponses,
  AddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutErrors,
  GetUserListUsersV1UsersGetData,
  GetUserListUsersV1UsersGetResponses,
  GetUserListUsersV1UsersGetErrors,
  CreateUserUsersV1UsersPostData,
  CreateUserUsersV1UsersPostResponses,
  CreateUserUsersV1UsersPostErrors,
  GetUserUsersV1UsersUserIdGetData,
  GetUserUsersV1UsersUserIdGetResponses,
  GetUserUsersV1UsersUserIdGetErrors,
  AsignRoleUsersV1UsersUserUuidRolePutData,
  AsignRoleUsersV1UsersUserUuidRolePutResponses,
  AsignRoleUsersV1UsersUserUuidRolePutErrors,
  GetAllProvidersProvidersV1ProvidersGetData,
  GetAllProvidersProvidersV1ProvidersGetResponses,
  GetAllProvidersProvidersV1ProvidersGetErrors,
  GetSystemPermissionsPermissionsGetData,
  GetSystemPermissionsPermissionsGetResponses,
  GetSystemModulesModulesGetData,
  GetSystemModulesModulesGetResponses,
} from "./types.gen";
import {
  zRefreshTokenAuthV1AuthRefreshPostData,
  zRefreshTokenAuthV1AuthRefreshPostResponse,
  zVerifyTokenAuthV1AuthVerifyPostData,
  zLoginAuthV1AuthLoginPostData,
  zRegisterAuthV1AuthRegisterPostData,
  zPasswordResetAuthV1AuthPasswordResetPostData,
  zGetAllRolesRbacV1RbacRoleGetData,
  zCreateRoleRbacV1RbacRolePostData,
  zEditRoleRbacV1RbacRolePutData,
  zDeleteRoleRbacV1RbacRoleIdRoleDeleteData,
  zGetRoleRbacV1RbacRoleIdRoleGetData,
  zGetRoleRbacV1RbacRoleIdRoleGetResponse,
  zGetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetData,
  zGetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetResponse,
  zAddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutData,
  zAddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutResponse,
  zAddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutData,
  zAddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutResponse,
  zAddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutData,
  zAddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutResponse,
  zGetAllPermissionsRbacV1RbacPermissionGetData,
  zCreatePermissionRbacV1RbacPermissionPostData,
  zEditPermissionRbacV1RbacPermissionPutData,
  zDeletePermissionRbacV1RbacPermissionIdPermissionDeleteData,
  zGetPermissionRbacV1RbacPermissionIdPermissionGetData,
  zGetAllGroupsRbacV1RbacGroupGetData,
  zCreateGroupRbacV1RbacGroupPostData,
  zGetGroupRbacV1RbacGroupIdGroupGetData,
  zGetGroupRbacV1RbacGroupIdGroupGetResponse,
  zAddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutData,
  zAddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutResponse,
  zGetUserListUsersV1UsersGetData,
  zCreateUserUsersV1UsersPostData,
  zGetUserUsersV1UsersUserIdGetData,
  zAsignRoleUsersV1UsersUserUuidRolePutData,
  zGetAllProvidersProvidersV1ProvidersGetData,
  zGetSystemPermissionsPermissionsGetData,
  zGetSystemModulesModulesGetData,
} from "./zod.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class Auth {
  /**
   * Refresh Token
   */
  public static refreshTokenAuthV1AuthRefreshPost<
    ThrowOnError extends boolean = false,
  >(options: Options<RefreshTokenAuthV1AuthRefreshPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      RefreshTokenAuthV1AuthRefreshPostResponses,
      RefreshTokenAuthV1AuthRefreshPostErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zRefreshTokenAuthV1AuthRefreshPostData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zRefreshTokenAuthV1AuthRefreshPostResponse.parseAsync(
          data,
        );
      },
      url: "/auth/v1/auth/refresh",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Verify Token
   */
  public static verifyTokenAuthV1AuthVerifyPost<
    ThrowOnError extends boolean = false,
  >(options: Options<VerifyTokenAuthV1AuthVerifyPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      VerifyTokenAuthV1AuthVerifyPostResponses,
      VerifyTokenAuthV1AuthVerifyPostErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zVerifyTokenAuthV1AuthVerifyPostData.parseAsync(data);
      },
      url: "/auth/v1/auth/verify",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Login
   */
  public static loginAuthV1AuthLoginPost<ThrowOnError extends boolean = false>(
    options: Options<LoginAuthV1AuthLoginPostData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      LoginAuthV1AuthLoginPostResponses,
      LoginAuthV1AuthLoginPostErrors,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      requestValidator: async (data) => {
        return await zLoginAuthV1AuthLoginPostData.parseAsync(data);
      },
      url: "/auth/v1/auth/login",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options.headers,
      },
    });
  }

  /**
   * Register
   */
  public static registerAuthV1AuthRegisterPost<
    ThrowOnError extends boolean = false,
  >(options: Options<RegisterAuthV1AuthRegisterPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      RegisterAuthV1AuthRegisterPostResponses,
      RegisterAuthV1AuthRegisterPostErrors,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      requestValidator: async (data) => {
        return await zRegisterAuthV1AuthRegisterPostData.parseAsync(data);
      },
      url: "/auth/v1/auth/register",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options.headers,
      },
    });
  }

  /**
   * Password Reset
   */
  public static passwordResetAuthV1AuthPasswordResetPost<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      PasswordResetAuthV1AuthPasswordResetPostData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).post<
      PasswordResetAuthV1AuthPasswordResetPostResponses,
      PasswordResetAuthV1AuthPasswordResetPostErrors,
      ThrowOnError
    >({
      ...urlSearchParamsBodySerializer,
      requestValidator: async (data) => {
        return await zPasswordResetAuthV1AuthPasswordResetPostData.parseAsync(
          data,
        );
      },
      url: "/auth/v1/auth/password_reset",
      ...options,
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        ...options.headers,
      },
    });
  }
}

export class Rbac {
  /**
   * Get All Roles
   */
  public static getAllRolesRbacV1RbacRoleGet<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetAllRolesRbacV1RbacRoleGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetAllRolesRbacV1RbacRoleGetResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllRolesRbacV1RbacRoleGetData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role",
      ...options,
    });
  }

  /**
   * Create Role
   */
  public static createRoleRbacV1RbacRolePost<
    ThrowOnError extends boolean = false,
  >(options: Options<CreateRoleRbacV1RbacRolePostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      CreateRoleRbacV1RbacRolePostResponses,
      CreateRoleRbacV1RbacRolePostErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreateRoleRbacV1RbacRolePostData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Edit Role
   */
  public static editRoleRbacV1RbacRolePut<ThrowOnError extends boolean = false>(
    options?: Options<EditRoleRbacV1RbacRolePutData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).put<
      EditRoleRbacV1RbacRolePutResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zEditRoleRbacV1RbacRolePutData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role",
      ...options,
    });
  }

  /**
   * Delete Role
   */
  public static deleteRoleRbacV1RbacRoleIdRoleDelete<
    ThrowOnError extends boolean = false,
  >(options: Options<DeleteRoleRbacV1RbacRoleIdRoleDeleteData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).delete<
      DeleteRoleRbacV1RbacRoleIdRoleDeleteResponses,
      DeleteRoleRbacV1RbacRoleIdRoleDeleteErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zDeleteRoleRbacV1RbacRoleIdRoleDeleteData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}",
      ...options,
    });
  }

  /**
   * Get Role
   */
  public static getRoleRbacV1RbacRoleIdRoleGet<
    ThrowOnError extends boolean = false,
  >(options: Options<GetRoleRbacV1RbacRoleIdRoleGetData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetRoleRbacV1RbacRoleIdRoleGetResponses,
      GetRoleRbacV1RbacRoleIdRoleGetErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetRoleRbacV1RbacRoleIdRoleGetData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zGetRoleRbacV1RbacRoleIdRoleGetResponse.parseAsync(data);
      },
      url: "/rbac/v1/rbac/role/{id_role}",
      ...options,
    });
  }

  /**
   * Get All Role Permissions
   */
  public static getAllRolePermissionsRbacV1RbacRoleIdRolePermissionGet<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      GetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetResponses,
      GetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetData.parseAsync(
          data,
        );
      },
      responseValidator: async (data) => {
        return await zGetAllRolePermissionsRbacV1RbacRoleIdRolePermissionGetResponse.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/role/{id_role}/permission",
      ...options,
    });
  }

  /**
   * Add Permissions To Role
   */
  public static addPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPut<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      AddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutResponses,
      AddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutData.parseAsync(
          data,
        );
      },
      responseValidator: async (data) => {
        return await zAddPermissionsToRoleRbacV1RbacRoleIdRoleAddPermissionPutResponse.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/role/{id_role}/add/permission",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Add Groups To Role
   */
  public static addGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPut<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      AddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutResponses,
      AddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutData.parseAsync(
          data,
        );
      },
      responseValidator: async (data) => {
        return await zAddGroupsToRoleRbacV1RbacRoleIdRoleAddGroupsPutResponse.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/role/{id_role}/add/groups",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Add Modules To Role
   */
  public static addModulesToRoleRbacV1RbacRoleIdRoleAddModulesPut<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      AddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutResponses,
      AddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutData.parseAsync(
          data,
        );
      },
      responseValidator: async (data) => {
        return await zAddModulesToRoleRbacV1RbacRoleIdRoleAddModulesPutResponse.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/role/{id_role}/add/modules",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get All Permissions
   */
  public static getAllPermissionsRbacV1RbacPermissionGet<
    ThrowOnError extends boolean = false,
  >(
    options?: Options<
      GetAllPermissionsRbacV1RbacPermissionGetData,
      ThrowOnError
    >,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAllPermissionsRbacV1RbacPermissionGetResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllPermissionsRbacV1RbacPermissionGetData.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/permission",
      ...options,
    });
  }

  /**
   * Create Permission
   */
  public static createPermissionRbacV1RbacPermissionPost<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      CreatePermissionRbacV1RbacPermissionPostData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).post<
      CreatePermissionRbacV1RbacPermissionPostResponses,
      CreatePermissionRbacV1RbacPermissionPostErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreatePermissionRbacV1RbacPermissionPostData.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/permission",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Edit Permission
   */
  public static editPermissionRbacV1RbacPermissionPut<
    ThrowOnError extends boolean = false,
  >(options: Options<EditPermissionRbacV1RbacPermissionPutData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<
      EditPermissionRbacV1RbacPermissionPutResponses,
      EditPermissionRbacV1RbacPermissionPutErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zEditPermissionRbacV1RbacPermissionPutData.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/permission",
      ...options,
    });
  }

  /**
   * Delete Permission
   */
  public static deletePermissionRbacV1RbacPermissionIdPermissionDelete<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      DeletePermissionRbacV1RbacPermissionIdPermissionDeleteData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePermissionRbacV1RbacPermissionIdPermissionDeleteResponses,
      DeletePermissionRbacV1RbacPermissionIdPermissionDeleteErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zDeletePermissionRbacV1RbacPermissionIdPermissionDeleteData.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/permission/{id_permission}",
      ...options,
    });
  }

  /**
   * Get Permission
   */
  public static getPermissionRbacV1RbacPermissionIdPermissionGet<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      GetPermissionRbacV1RbacPermissionIdPermissionGetData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetPermissionRbacV1RbacPermissionIdPermissionGetResponses,
      GetPermissionRbacV1RbacPermissionIdPermissionGetErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetPermissionRbacV1RbacPermissionIdPermissionGetData.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/permission/{id_permission}",
      ...options,
    });
  }

  /**
   * Get All Groups
   */
  public static getAllGroupsRbacV1RbacGroupGet<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetAllGroupsRbacV1RbacGroupGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetAllGroupsRbacV1RbacGroupGetResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllGroupsRbacV1RbacGroupGetData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/group",
      ...options,
    });
  }

  /**
   * Create Group
   */
  public static createGroupRbacV1RbacGroupPost<
    ThrowOnError extends boolean = false,
  >(options: Options<CreateGroupRbacV1RbacGroupPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      CreateGroupRbacV1RbacGroupPostResponses,
      CreateGroupRbacV1RbacGroupPostErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreateGroupRbacV1RbacGroupPostData.parseAsync(data);
      },
      url: "/rbac/v1/rbac/group",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get Group
   */
  public static getGroupRbacV1RbacGroupIdGroupGet<
    ThrowOnError extends boolean = false,
  >(options: Options<GetGroupRbacV1RbacGroupIdGroupGetData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetGroupRbacV1RbacGroupIdGroupGetResponses,
      GetGroupRbacV1RbacGroupIdGroupGetErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetGroupRbacV1RbacGroupIdGroupGetData.parseAsync(data);
      },
      responseValidator: async (data) => {
        return await zGetGroupRbacV1RbacGroupIdGroupGetResponse.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/group/{id_group}",
      ...options,
    });
  }

  /**
   * Add Permissions To Group
   */
  public static addPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPut<
    ThrowOnError extends boolean = false,
  >(
    options: Options<
      AddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutData,
      ThrowOnError
    >,
  ) {
    return (options.client ?? _heyApiClient).put<
      AddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutResponses,
      AddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutData.parseAsync(
          data,
        );
      },
      responseValidator: async (data) => {
        return await zAddPermissionsToGroupRbacV1RbacGroupIdGroupAddPermissionPutResponse.parseAsync(
          data,
        );
      },
      url: "/rbac/v1/rbac/group/{id_group}/add/permission",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }
}

export class Users {
  /**
   * Get User List
   */
  public static getUserListUsersV1UsersGet<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetUserListUsersV1UsersGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetUserListUsersV1UsersGetResponses,
      GetUserListUsersV1UsersGetErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetUserListUsersV1UsersGetData.parseAsync(data);
      },
      url: "/users/v1/users",
      ...options,
    });
  }

  /**
   * Create User
   */
  public static createUserUsersV1UsersPost<
    ThrowOnError extends boolean = false,
  >(options: Options<CreateUserUsersV1UsersPostData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).post<
      CreateUserUsersV1UsersPostResponses,
      CreateUserUsersV1UsersPostErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zCreateUserUsersV1UsersPostData.parseAsync(data);
      },
      url: "/users/v1/users",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }

  /**
   * Get User
   */
  public static getUserUsersV1UsersUserIdGet<
    ThrowOnError extends boolean = false,
  >(options: Options<GetUserUsersV1UsersUserIdGetData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).get<
      GetUserUsersV1UsersUserIdGetResponses,
      GetUserUsersV1UsersUserIdGetErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetUserUsersV1UsersUserIdGetData.parseAsync(data);
      },
      url: "/users/v1/users/{user_id}",
      ...options,
    });
  }

  /**
   * Asign Role
   */
  public static asignRoleUsersV1UsersUserUuidRolePut<
    ThrowOnError extends boolean = false,
  >(options: Options<AsignRoleUsersV1UsersUserUuidRolePutData, ThrowOnError>) {
    return (options.client ?? _heyApiClient).put<
      AsignRoleUsersV1UsersUserUuidRolePutResponses,
      AsignRoleUsersV1UsersUserUuidRolePutErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zAsignRoleUsersV1UsersUserUuidRolePutData.parseAsync(data);
      },
      url: "/users/v1/users/{user_uuid}/role",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });
  }
}

export class Providers {
  /**
   * Get All Providers
   */
  public static getAllProvidersProvidersV1ProvidersGet<
    ThrowOnError extends boolean = false,
  >(
    options?: Options<GetAllProvidersProvidersV1ProvidersGetData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetAllProvidersProvidersV1ProvidersGetResponses,
      GetAllProvidersProvidersV1ProvidersGetErrors,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetAllProvidersProvidersV1ProvidersGetData.parseAsync(
          data,
        );
      },
      url: "/providers/v1/providers",
      ...options,
    });
  }
}

export class System {
  /**
   * Get System Permissions
   */
  public static getSystemPermissionsPermissionsGet<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetSystemPermissionsPermissionsGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetSystemPermissionsPermissionsGetResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetSystemPermissionsPermissionsGetData.parseAsync(data);
      },
      url: "/permissions",
      ...options,
    });
  }

  /**
   * Get System Modules
   */
  public static getSystemModulesModulesGet<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetSystemModulesModulesGetData, ThrowOnError>) {
    return (options?.client ?? _heyApiClient).get<
      GetSystemModulesModulesGetResponses,
      unknown,
      ThrowOnError
    >({
      requestValidator: async (data) => {
        return await zGetSystemModulesModulesGetData.parseAsync(data);
      },
      url: "/modules",
      ...options,
    });
  }
}
